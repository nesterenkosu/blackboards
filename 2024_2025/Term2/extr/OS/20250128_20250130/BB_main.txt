Базовые команды ОС Unix/Linux

Выдача списка файлов и каталогов

краткая форма
ls

расширенная форма
ls -l
ll

Чувствительность к регистру в именах файлов и папок
File1.txt и file1.txt - разные файлы!

Переход в каталог
cd имя_каталога
cd полный_путь_к_каталогу
Переход в домашний каталог:
cd

Специальные символы в файловых путях
~ - домашний каталог
. - текущий каталог
.. - родительский каталог

Работа с файлами

Создание файла
1) С помощью текстового редактора mcedit
mcedit имя_файла
2) С помощью команды touch (создание пустого файла с заданным именем)
touch имя_файла

Команда cat используется для вывода содержимого файла, а также может быть использована для редактирования содержимого

Редактирование (добавление новых данных)

cat > имя_файла

Ctrl-D - завершить ввод

Просмотр содержимого файла

cat имя_файла

Редактор vi
переход в режим редактирования: клавиша i
сохранение изменений и выход: ESC, :wq

Копирование и вставка (буфер обмена) в Putty
Скопировать текст - просто выделить его левой кнопкой мыши
Вставить текст - нажать на правую кнопку мыши

Повтор команды, а также пролистывание истории команд - кнопки "Вверх" и "Вниз"

Перенаправление экранного вывода любой команды в файл
команда > файл - с перезаписью содержимого
команда >> файл - с дозаписью в конец файла

* Копирование файла
cp исх_файл копия

* Переименование и перенос файлов
mv исх_файл переименов_файл

* Удаление файлов
rm имя_файла

* Создание каталогов

Создать каталог
mkdir имя_каталога

Перейти в каталог
cd имя_каталога

Посмотреть полный путь к каталогу, где вы находитесь
pwd

* Удаление каталогов
rmdir имя_каталога - удаление только пустого каталога
rm -R имя_каталога - удаление любого каталога (в т.ч. непустого)

* Просмотр дерева каталогов
tree имя_каталога

Перенаправление ввода и вывода команд
> - перенаправить экран на файл с перезаписью его содержимого
>> - перенаправить экран на файл с дозаписью в конец файла
< - перенаправить клавиатуру на файл
| - перенаправить экранный вывод одной команды на клавиатурный ввод другой команды (конвейер)

Компиляция программ на языке C
cc имя_файла.c -o имя_исполнимого_файла
запуск скомпилированной программы
./имя_исполнимого_файла

(при запуске программ не допускается использовать относительные адреса)

Использование кода возврата программы:
Узнать код возврата 
$?
Условные конструкции

Программа 2 будет выполнена только в случае успешного завершения программы 1 (завершения с кодом возврата 0):
программа1 && программа2


программа1 || программа2

Команды для конвейерного использования:

Подсчёт статистики текстового потока
wc
Подсчёт количества строк в текстовом потоке
wc -l

Фильтрация по заданному шаблону
grep шаблон

в простейшем случае шаблон - искомая подстрока
более сложный вариант - использовать в шаблоне регулярные выражения

grep в случае, когда не находит во входном потоке указанную подстроку, возвращает статусный код 1. Иначе возвращает статусный код 0.

Ссылки на файлы
~~~~~~~~~~~~~~~
Ссылка - специальный файл, адресующий другой файл. Наиболее близкая аналогия - ярлык в Windows

Создание ссылок
ln [-s] имя_адресуемого_файла имя_ссылки

Виды ссылок
- Символические
- Жёсткие

Создание символической ссылки:
ln -s имя_адресуемого_файла имя_ссылки

Создание жёсткой ссылки:
ln имя_адресуемого_файла имя_ссылки

Символические ссылки
- Перестают функционировать при удалении исходного адресуемого файла
- Могут находиться на другом диске по отношению к адресуемому файлу
- Могут адресовать папки
- Более низкий уровень маскировки адресуемых файлов

Жёсткие ссылки
- Продолжают функционировать при удалении исходного адресуемого файла
- Должны находиться на одном диске (разделе) вместе с адресуемым файлом
- Не могут адресовать папки
- Более высокий уровень маскировки адресуемых файлов

Права доступа к файлам
~~~~~~~~~~~~~~~~~~~~~~
Права:
	r - право на чтение
	w - право на запись
	x - право на исполнение

Субъекты прав:
	владелец - по умолчанию тот, кто создал файл. Но владелец может быть изменён с помощью команды chown. Тот, кто может изменять права доступа к этому файлу
	группа - по умолчанию рабочая группа владельца. Но может отличаться от той, в которую входит владелец. Группа может быть изменена с помощью команды chgrp.
	остальные - все, кто не вошёл в первые два субъекта (не владелец и не группа)

Группу и владельца файла может изменять только администратор (root)

Права доступа к файлу изменяются с помощью команды chmod. Права доступа к файлу могут изменять владелец и администратор.

chmod устанавливаемые_права файл_или_каталог

Устанавливаемые права

* В числовой форме. Трёхразрядное число:
1й разряд - права владельца
2й разряд - права группы
3й разряд - права остальных

Каждый разряд формируется суммированием констант
4тение
2апись
1сполнение

u   g   o 
rwx rwx rwx
110 011 000
6   3   0

* В символьной форме

субъект операция права

Субъекты:
 u - владелец (user)
 g - группа (group)
 o - остальные (others)
 a - все (all)

Операции:
 + - добавить права к существующим
 - - забрать права от существующих
 = - полностью перезаписать существующие права новыми правами 

Права:
 r - право на чтение (read)
 w - право на запись (write)
 x - право на исполнение (eXecute)

	
Права доступа к каталогам
-------------------------
r - право просматривать список файлов, находящихся в нём
w - право изменять список файлов, находящихся в нём (создавать новые файлы, переименовывать существующие, удалять существующие)
x - право заходить в каталог и считывать или изменять содержимое файлов, находящихся в нём

Скрипты командного интерпретатора
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Текстовые файлы, содержащие набор команд консоли. Эти файлы могут быть запущены на выполнение как программы. Это приведёт к последовательному выполнению команд, записанных в файле.

Пользовательский консольный ввод обрабатывается с помощью командного интерпретатора.

Под Linux существует несколько разных командных интерпретаторов. Наиболее популярные
- tcsh
- bash

Они отличаются синтаксисом управляющих конструкций и некоторыми возможностями

Под Windows также существуют командные интерпретаторы
cmd, command.com
PowerShell
Vbs

Скрипты под Windows представлены текстовыми файлами с расширениями .bat, .cmd, .ps

Скрипты позволяют автоматизировать действия по администрированию операционной системы без использования языков программирования. Более того, многие задачи с помощью скриптов решаются проще, чем с помощью языков программирования.

Примеры задач, решаемых скриптами:
- Автоматическая регистрация новых пользователей
- Резервное копирование файлов
- Очистка системы
... 

Командный интерпретатор tcsh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Строковые константы. 3 вида кавычек
"..." - вывод строки с интерпретацией метасимволов
'...' - вывод строки без интерпретации метасимволов
`...` - выполнение команды, записанной в кавычках, и возврат её экранного вывода (stdout). Если необходимо сравнить экранный вывод с каким либо значением или присвоить его переменной

Профайлы - скрипты, размещаемые в корне домашнего каталога пользователя, и автоматически запускаемые при тех или иных событиях
Примеры:
.login - будет выполнен при каждом входе в систему
.logout - будет выполнен при каждом выходе из системы
.cshrc - будет выполнен при каждом новом запуске командного интерпретатора

Согласованная работа с файлами
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Файловые блокировки. Ограничение доступа файлу в момент, когда его использует какой-либо процесс.

2 вида блокировок:
- Блокировка при чтении (F_RDLCK). Запрещает в других процессах запись в файл до тех пор, пока есть хотя бы один читающий процесс

- Блокировка при записи (F_WRLCK). Запрещает в других процессах запись и чтение из файла, до тех пор, пока работает записывающий процесс

Межпроцессное взаимодействие (IPC - InterProcess Communication)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Передача данных и уведомлений между параллельно работающими процессами

Инструменты:
- Объекты синхронизации (передача уведомлений о событиях)
    Сигналы
    Семафоры
- Объекты передачи данных (передача произвольных байт данных произвольного объёма)
    Неименованные и именованные каналы
    Очереди сообщений
    Разделяемая память


Сигналы
-------
Назначение обработчика сигнала в программе на языке C
signal(имя_сигнала,имя_обработчика)

Отправка сигнала программе (процессу)
Из командной строки
kill имя_сигнала pid_процесса

pid - process id
ps - вывод всех запущенных процессов с их идентификаторами

Неименованные каналы
--------------------
Подходят только для коммуникации родственных процессов
Процессы являются родственными если один из процессов запускает другой процесс, либо несколько процессов запущены одним общим процессом-предком

Процесс-предок - запускающий процесс
Процесс-потомок - запускаемый процесс
Родственниками являются предок и непосредственный потомк, а также потомки, порождённые от общего предка.

Как запустить дочерний процесс?

fork() - запускает копию текущего процесса, которая начнёт выполняться со строки, где был вызван fork в родителе.

exec() - замещает текущий процесс другим процессом

man имя_команды  - получение встроенной справки по некоторой команде консоли или функции языка C

Именованные каналы
------------------
Обеспечивают взаимодействие любых двух и более параллельно работающих процессов.

Очереди сообщений
-----------------
Работа очереди сообщений наиболее похожа на работу почтового ящика.
В очередь помещаются сообщения, для которых указан адресат. Принятие сообщений осуществляется строго в той последовательности, в которой они были отправлены.

ipcs - просмотр списка объектов межпроцессного взаимодействия, существующих в памяти
ipcrm тип_объекта id_объекта - удаление объекта межпроцессного взаимодействия по его id














